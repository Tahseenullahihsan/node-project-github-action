name: workflow for the nodejs application

on: 
  push: 
    branches:
      - 'feature/**'
      - 'main'
  pull_request:
    branches: 
      - 'feature/**'
      - 'main'
env: 
  IMAGE_NMAE: ${{ secrets.DOCKERHUB_USERNAME }}/my-app
  IMAGE_TAG:  ${{ github.sha }}

jobs:
  ci-cd:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: .
    steps: 
      - name: Checkout action to pull the code into the action runner
        uses: actions/checkout@v3
# this jobs is runing on the seld hosted runner   
      - name: checking the node envirment
        uses: actions/setup-node@v3
        with:
            node-version:: '18'
      - name: Install dependencies
        run: npm install --save-dev jest

      - name: Run tests with coverage
        run: npx jest --coverage --coverageDirectory=coverage

      - name: Upload the HTML coverage report
        uses: actions/upload-artifact@v4
        with:
         name: store-the-artifacts
         path: coverage
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: node-github-action
          path: . 
          format: ALL
          out: dependency-check-report

      - name: Upload OWASP HTML report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report
      
      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=node-github-action \
            -Dsonar.projectName=node-github-action \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
         username: ${{ secrets.DOCKERHUB_USERNAME }}
         password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        run: |
          docker build -t ${{ env.IMAGE_NMAE }}:${{env.IMAGE_TAG}} .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{env.IMAGE_NMAE}}:${{env.IMAGE_TAG}}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'